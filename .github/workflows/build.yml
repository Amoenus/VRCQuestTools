name: Build

# Controls when the workflow will run
on:
  push:
# pull_request:

  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-build-${{ github.ref }}
          restore-keys: |
            Library-build-

      - uses: anatawa12/sh-actions/setup-vrc-get@master
      - uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 60
          command: vrc-get resolve
      - run: vrc-get info project

      - name: Copy README
        run: cp README.md Packages/com.github.kurotu.vrc-quest-tools/

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows
          unityVersion: 2022.3.22f1
          buildMethod: KRT.VRCQuestTools.VRCQuestTools.Export
          allowDirtyBuild: true
          versioning: None

      - uses: actions/upload-artifact@v4
        with:
          name: unitypackage
          path: VRCQuestTools.unitypackage

  test:
    name: test (${{matrix.sdk.unityVersion}}, sdk-${{matrix.sdk.name}}, deps-${{matrix.dependencies.name}})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk:
          - name: minimum
            unityVersion: 2022.3.22f1
            vrcsdkVersion: 3.8.1 # toon standard
          - name: latest
            unityVersion: 2022.3.22f1
            vrcsdkVersion: latest
        dependencies:
          - name: nothing
            packages: []
          - name: unsupported
            packages:
              - { name: nadena.dev.ndmf, version: '1.4.1' }
              - { name: jp.lilxyzw.liltoon, version: '1.9.0' }
          - name: minimum
            packages:
              - { name: nadena.dev.ndmf, version: '1.5.0' } # ndmf-preview
              - { name: jp.lilxyzw.liltoon, version: '1.10.0' } # shadow ramp
          - name: latest
            packages:
              - { name: nadena.dev.modular-avatar, version: 'latest' }
              - { name: nadena.dev.ndmf, version: 'latest' }
              - { name: jp.lilxyzw.liltoon, version: 'latest' }
          - name: ma-unsupported
            packages:
              - { name: nadena.dev.modular-avatar, version: '1.11.7' }
          - name: ma-minimum
            packages:
              - { name: nadena.dev.modular-avatar, version: '1.12.0' }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-test-${{ matrix.sdk.unityVersion }}-${{ matrix.sdk.vrcsdkVersion }}-${{ github.ref }}
          restore-keys: |
            Library-test-${{ matrix.sdk.unityVersion }}-${{ matrix.sdk.vrcsdkVersion }}

      - uses: anatawa12/sh-actions/setup-vrc-get@master
      - uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 60
          command: vrc-get resolve
      - run: rm -r Packages/vpm-manifest.json Packages/com.vrchat.avatars Packages/com.vrchat.base

      - name: Install VRChat SDK
        run: |
          scripts/vrc-get-install.sh com.vrchat.base ${{ matrix.sdk.vrcsdkVersion }}
          scripts/vrc-get-install.sh com.vrchat.avatars ${{ matrix.sdk.vrcsdkVersion }}

      - name: Add VPM repositories
        run: |
          vrc-get repo add https://vpm.nadena.dev/vpm.json
          vrc-get repo add https://lilxyzw.github.io/vpm-repos/vpm.json

      - name: Install dependencies
        run: |
          for pkg in $(echo '${{ toJson(matrix.dependencies.packages) }}' | jq -c '.[]'); do
            name=$(echo "$pkg" | jq -r '.name')
            version=$(echo "$pkg" | jq -r '.version')
            scripts/vrc-get-install.sh "$name" "$version"
          done

      - run: vrc-get info project

      - uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ matrix.sdk.unityVersion }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: "Test Results: ${{matrix.sdk.unityVersion}}, sdk-${{matrix.sdk.name}}, deps-${{matrix.dependencies.name}}"

  lint:
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-2022.3.22f1-windows-mono-3
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: Library
          key: Library-build-${{ github.ref }}
          restore-keys: |
            Library-build-

      - uses: anatawa12/sh-actions/setup-vrc-get@master
      - uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 60
          command: vrc-get resolve
      - run: vrc-get info project
      - run: vrc-get repo add https://vpm.nadena.dev/vpm-prerelease.json
      - run: scripts/vrc-get-install.sh nadena.dev.modular-avatar latest

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # https://github.com/game-ci/unity-builder/issues/497#issuecomment-1407712495
      - name: Locate LICENSE
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          FILE_PATH=$(mktemp).ulf
          echo "$UNITY_LICENSE" > $FILE_PATH
          unity-editor -batchmode -nographics -logFile /dev/stdout -quit -manualLicenseFile $FILE_PATH
          rm $FILE_PATH

      - name: Generate Solution
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        run: unity-editor -nographics -logFile /dev/stdout -customBuildName Card-Game-Simulator -projectPath . -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution -quit

      - name: Add dotnet problem matcher
        run: echo "::add-matcher::.github/problem-matchers/csc.json"

      - name: Check style
        run: ./scripts/lint.sh | tee lint.log
        env:
          DOTNET_CLI_UI_LANGUAGE: en

      - name: Upload lint log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint
          path: lint.log

  vpm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Copy README
        run: cp README.md Packages/com.github.kurotu.vrc-quest-tools/
      - name: Make zip
        run: |
          cd Packages/com.github.kurotu.vrc-quest-tools
          zip -r ../../$(jq -r '.name' package.json)-$(jq -r '.version' package.json).zip $(ls)
      - uses: actions/upload-artifact@v4
        with:
          name: vpm
          path: "*.zip"

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          cache: 'pnpm'
          cache-dependency-path: Website/pnpm-lock.yaml
      - run: cd Website && pnpm install --frozen-lockfile
      - run: cd Website && pnpm run build

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, test, lint, vpm, docs]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: unitypackage

      - uses: actions/download-artifact@v4
        with:
          name: vpm

      - name: Create release artifact
        id: artifact
        run: |
          NAME=VRCQuestTools-${GITHUB_REF#refs/tags/}
          mkdir ${NAME}
          cp VRCQuestTools.unitypackage ${NAME}/${NAME}.unitypackage
          cp LICENSE.txt ${NAME}/
          cp README*.md ${NAME}/
          cp .github/workflows/Add\ to\ VCC.url ${NAME}/
          zip -r ${NAME}.zip ${NAME}
          echo "::set-output name=artifact-name::${NAME}"

      - name: Generate release note
        run: ./scripts/generate-releasenote.sh ${GITHUB_REF#refs/tags/v} | tee ${{ github.workspace }}-release.txt

      - uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ github.workspace }}-release.txt
          draft: true
          prerelease: ${{ contains(github.ref, '-') }}
          files: |
            Packages/com.github.kurotu.vrc-quest-tools/package.json
            *.zip
            ${{ steps.artifact.outputs.artifact-name }}/${{ steps.artifact.outputs.artifact-name }}.unitypackage
